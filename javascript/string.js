let tek = "tek-tƒ±rnak";
let cift = "√ßift-tƒ±rnak";
let us_isareti = `√ºs i≈üareti`;

function toplam(a, b) {
  return a + b;
}

alert(`1 + 2 = ${toplam(1, 2)}.`);

let davetliListesi = `davetliler:
* ihsan
* cemal
* murtaza
`;

alert(davetliListesi);

let davetliListesi = "Davetliler:\n * ƒ∞hsan\n * Cemal\n * Muzaffer";

alert(davetliListesi);

alert("Merhaba\nD√ºnya");

alert(`Merhaba D√ºnya`);

alert("\u00A9");
alert("\u{20331}");
alert("\u{1F60D}");

alert("N'aber canƒ±m - Tav≈üan !");

alert(`\\`);

alert(`Naber\n`.length);

let str = `Selam`;

// ilk karakter
alert(str[0]); // S
alert(str.charAt(0)); // S

// son karakter
alert(str[str.length - 1]); // m

let str = `Selam`;

alert(str[1000]); // undefined
alert(str.charAt(1000)); // '' (bo≈ü karakter)

for (let karakter of "Selam") {
  alert(karakter); // S,e,l,a,m (karakter √∂nce "S", sonra "e", sonra "a" vs)
}

let str = "Selam";

str[0] = "s"; // hata
alert(str[0]); // √ßalƒ±≈ümaz, deƒüi≈üiklik olmaz


let str = 'Selam';

str = str[0] + 'ELAM' ;  // karakter dizisini tamamen deƒüi≈ütir.

alert( str ); // SELAM

alert( 'Aray√ºz'.toUpperCase() ); // ARAY√úZ
alert( 'Aray√ºz'.toLowerCase() ); // aray√ºz

alert( 'Aray√ºz'[0].toLowerCase() ); // 'a'

let str = "N`aber Canƒ±m - Tav≈üan";

alert( str.indexOf("N'aber") ); // 0, √ß√ºnk√º N`aber ba≈ülangƒ±√ßta
alert( str.indexOf("n'aber") ); // -1, bulunamadƒ±, arama b√ºy√ºk/k√º√ß√ºk harf duyarlƒ±dƒ±r.

alert( str.indexOf("Tav≈üan") ); // 15, "Tav≈üan" 15. pozisyonda bulunmaktadƒ±r.

let str = "N`aber Canƒ±m - Tav≈üan";

alert( str.indexOf('an', 9) ) // 19

let str = 'Bir berber bir berbere gel birader beraber bir berber d√ºkkanƒ± a√ßalƒ±m demi≈ü';

let hedef = 'bir';

let poz = 0;
while (true) {
  let bulunanPoz = str.indexOf(hedef, poz);
  if (bulunanPoz == -1) break;

  alert( `Bulunan poz: ${bulunanPoz}` );
  poz = bulunanPoz + 1; // bir sonraki pozisyondan aramaya devam et.
}

let str = 'Bir berber bir berbere gel birader beraber bir berber d√ºkkanƒ± a√ßalƒ±m demi≈ü';
let hedef = "bir";


let poz = -1;
while ((poz = str.indexOf(hedef, poz + 1)) != -1) {
  alert( poz );
}

let str = "Bin berber bir berbere gel birader beraber bir berber d√ºkkanƒ± a√ßalƒ±m demi≈ü";

if (str.lastIndexOf("Bin")) {
    alert("Buldum!"); // √ßalƒ±≈ümaz!
}

let str = "Bin berber bir berbere gel birader beraber bir berber d√ºkkanƒ± a√ßalƒ±m demi≈ü";

if (str.indexOf("Bin") != -1) {
    alert("Buldum"); // ≈ûimdi oldu!
}


alert( ~2 ); // -3,  -(2+1) demektir.
alert( ~1 ); // -2,  -(1+1) demektir.
alert( ~0 ); // -1,  -(0+1) demektir.
alert( ~-1 ); // 0,  -(-1+1) demektir.

let str = "Bin berber bir berbere gel birader beraber bir berber d√ºkkanƒ± a√ßalƒ±m demi≈ü";

if (~str.indexOf("Bin")) {
  alert( 'Buldum!' ); // √áalƒ±≈ütƒ±
}

alert( "Bin berber bir berbere gel birader beraber bir berber d√ºkkanƒ± a√ßalƒ±m demi≈ü".includes("Bin") ); // true

alert( "Merhaba".includes("G√ºle G√ºle") ); // false


alert( "birader".includes("ir") ); // true
alert( "birader".includes("ir", 3) ); // false, 3. pozisyondan sonra `ir` bulunmamaktadƒ±r.

alert( "birader".startsWith("bir") ); // true, "birader" "bir" ile ba≈ülar.
alert( "birader".endsWith("er") );   // true, "birader" "er" ile biter.

let str = "stringify";
alert( str.slice(0,5) ); // 'strin',  0 ile 5 arasƒ±ndaki alt karakter dizisi (5 dahil deƒüil)
alert( str.slice(0,1) ); // 's', 0 ile 1, fakat 1 dahil deƒüil, yani sadece 0'ƒ±ncƒ± karakter.


let str = "stringify";
alert( str.slice(2) ); // ringify, ikinci pozisyondan sonuna kadar.

let str = "stringify";

// saƒüdan 4. pozisyondan ba≈üla ve yine saƒüdan 1. pozisyona kadar al.
alert( str.slice(-4, -1) ); // gif

let str = "stringify";

// alt karakter dizisi i√ßin aynƒ±dƒ±r.
alert( str.substring(2, 6) ); // "ring"
alert( str.substring(6, 2) ); // "ring"

// ...fakat slice i√ßin farklƒ±dƒ±r:
alert( str.slice(2, 6) ); // "ring" (aynƒ±)
alert( str.slice(6, 2) ); // "" (bo≈ü karakter)

let str = "stringify";
alert( str.substr(2, 4) ); // ring, 2. pozisyondan 4 karakter al.

let str = "stringify";
alert( str.substr(-4, 2) ); // gi, 4. pozisyondan 2 karakter al.

alert( 'a' > 'Z' ); // true

alert( '√ñsterreich' > 'Zealand' ); // true

// B√ºy√ºk k√º√ß√ºk harflerde farklƒ± kodlar d√∂nd√ºr√ºl√ºr.
alert( "z".codePointAt(0) ); // 122
alert( "Z".codePointAt(0) ); // 90
alert( String.fromCodePoint(90) ); // Z
// 90 hexa decimal sistemde 5a ya denk gelmektedir.
alert( '\u005a' ); // Z
let str = '';

for (let i = 65; i <= 220; i++) {
  str += String.fromCodePoint(i);
}
alert( str );
// ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~¬Ä¬Å¬Ç¬É¬Ñ
// ¬°¬¢¬£¬§¬•¬¶¬ß¬®¬©¬™¬´¬¨¬≠¬Æ¬Ø¬∞¬±¬≤¬≥¬¥¬µ¬∂¬∑¬∏¬π¬∫¬ª¬º¬Ω¬æ¬ø√Ä√Å√Ç√É√Ñ√Ö√Ü√á√à√â√ä√ã√å√ç√é√è√ê√ë√í√ì√î√ï√ñ√ó√ò√ô√ö√õ√ú
alert( '√ñsterreich'.localeCompare('Zealand') ); // -1
alert( 'ùí≥'.length ); // 2, MATHEMATICAL SCRIPT CAPITAL X
alert( 'üòÇ'.length ); // 2, FACE WITH TEARS OF JOY
alert( '©∑∂'.length ); // 2, a rare chinese hieroglyph
alert( 'ùí≥'[0] ); // garip semboller...
alert( 'ùí≥'[1] ); // ...her biri ikilinin par√ßalarƒ±
// charCodeAt √ßiftlere uygun deƒüildir, bundan dolayƒ± sadece kodlar verilir.
alert( 'ùí≥'.charCodeAt(0).toString(16) ); // d835, 0xd800 ile 0xdbff arasƒ±nda
alert( 'ùí≥'.charCodeAt(1).toString(16) ); // dcb3, 0xdc00 ile 0xdfff arasƒ±nda
alert( 'S\u0307' ); // SÃá
alert( 'S\u0307\u0323' ); // SÃáÃ£
alert( 'S\u0307\u0323' ); // SÃáÃ£, S + √ºst nokta + alt nokta
alert( 'S\u0323\u0307' ); // SÃáÃ£, S + alt nokta + √ºst nokta
alert( 'S\u0307\u0323' == 'S\u0323\u0307' ); // false
alert( "S\u0307\u0323".normalize() == "S\u0323\u0307".normalize() ); // true
alert( "S\u0307\u0323".normalize().length ); // 1
alert( "S\u0307\u0323".normalize() == "\u1e68" ); // true

/*
√ñzet
3 tip tƒ±rnak bulunmaktadƒ±r. ‚Äú`‚Äù i≈üareti ile birka√ß satƒ±rdan olu≈üan karakter dizisi yazmak m√ºmk√ºnd√ºr
JavaScript‚Äôte karakterler UTF-16 ile kodlanmƒ±≈ütƒ±r.
\n gibi √∂zel karakterler veya \u.. ile unicode kullanƒ±labilir.
Karakteri almak i√ßin: [] kullanƒ±lƒ±r.
Alt karakter k√ºmesi almak i√ßin slice veya substring kullanƒ±lƒ±r.
K√º√ß√ºk/b√ºy√ºk harf deƒüi≈üimi i√ßin: toLowerCase/toUpperCase.
Alt karakter dizisi aramak i√ßin : indexOf veya includes/startsWith/endsWith kullanƒ±labilir.
Karakterleri dile g√∂re kar≈üƒ±la≈ütƒ±rmak i√ßin localceCompare kullanƒ±labilir. Diƒüer t√ºrl√º karakterler kodlarƒ±na g√∂re kar≈üƒ±la≈ütƒ±rƒ±lƒ±rlar.
Bunun yanƒ±nda karakter dizileri i√ßin daha ba≈üka yardƒ±mcƒ± metodlar bulunmaktadƒ±r:

str.trim() ‚Äì ba≈ülangƒ±√ß ve biti≈üteki bo≈üluklarƒ± siler.
str.repeat(n) ‚Äì str'yi istendiƒüi kadar tekrar eder‚Ä¶
‚Ä¶ Daha fazlasƒ± i√ßin manual adresine bakabilirsiniz.
Karakter dizileri bunun yanƒ±nda arama/deƒüi≈ütirme veya regular expression i√ßin metodlar barƒ±ndƒ±rmaktadƒ±r. Fakat bu konular ayrƒ± b√∂l√ºmleri hak etmektedir. Bu konulara ilerleyen b√∂l√ºmlerde d√∂n√ºlecektir.

*/